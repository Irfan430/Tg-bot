/**
 * Menu Keyboards - Inline keyboards for bot navigation
 */

const { Markup } = require('telegraf');

const keyboards = {
    // Main menu keyboard
    mainMenu: () => {
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üì• Downloads', 'menu_downloads'),
                Markup.button.callback('üìä Stats', 'menu_stats')
            ],
            [
                Markup.button.callback('‚ùì Help', 'menu_help'),
                Markup.button.callback('‚öôÔ∏è Settings', 'menu_settings')
            ],
            [
                Markup.button.callback('üëë Premium', 'menu_premium')
            ]
        ]);
    },

    // Downloads menu
    downloadsMenu: () => {
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üéµ YouTube Audio', 'download_ytmp3'),
                Markup.button.callback('üé¨ YouTube Video', 'download_ytmp4')
            ],
            [
                Markup.button.callback('üìò Facebook Video', 'download_fb'),
                Markup.button.callback('üì∏ Instagram Reels', 'download_ig')
            ],
            [
                Markup.button.callback('‚¨ÖÔ∏è Back to Menu', 'menu_main')
            ]
        ]);
    },

    // Premium menu
    premiumMenu: (isPremium = false) => {
        if (isPremium) {
            return Markup.inlineKeyboard([
                [
                    Markup.button.callback('üìà Premium Stats', 'premium_stats'),
                    Markup.button.callback('üìã History', 'premium_history')
                ],
                [
                    Markup.button.callback('‚¨ÖÔ∏è Back to Menu', 'menu_main')
                ]
            ]);
        } else {
            return Markup.inlineKeyboard([
                [
                    Markup.button.callback('üíé Upgrade to Premium', 'premium_upgrade'),
                    Markup.button.callback('üí∞ Pricing', 'premium_pricing')
                ],
                [
                    Markup.button.callback('‚¨ÖÔ∏è Back to Menu', 'menu_main')
                ]
            ]);
        }
    },

    // Admin menu (only for admins)
    adminMenu: () => {
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üë• User Stats', 'admin_users'),
                Markup.button.callback('üìä Bot Stats', 'admin_stats')
            ],
            [
                Markup.button.callback('üì¢ Broadcast', 'admin_broadcast'),
                Markup.button.callback('üëë Manage Premium', 'admin_premium')
            ],
            [
                Markup.button.callback('‚¨ÖÔ∏è Back to Menu', 'menu_main')
            ]
        ]);
    },

    // Confirmation keyboards
    confirmAction: (action, data = '') => {
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('‚úÖ Yes', `confirm_${action}_${data}`),
                Markup.button.callback('‚ùå No', `cancel_${action}`)
            ]
        ]);
    },

    // Pagination keyboard
    pagination: (currentPage, totalPages, prefix = 'page') => {
        const buttons = [];
        
        if (currentPage > 1) {
            buttons.push(Markup.button.callback('‚¨ÖÔ∏è Previous', `${prefix}_${currentPage - 1}`));
        }
        
        buttons.push(Markup.button.callback(`${currentPage}/${totalPages}`, 'current_page'));
        
        if (currentPage < totalPages) {
            buttons.push(Markup.button.callback('Next ‚û°Ô∏è', `${prefix}_${currentPage + 1}`));
        }
        
        return Markup.inlineKeyboard([buttons]);
    },

    // Download quality selection
    qualityMenu: (type = 'video') => {
        if (type === 'video') {
            return Markup.inlineKeyboard([
                [
                    Markup.button.callback('üé¨ 720p', 'quality_720p'),
                    Markup.button.callback('üé• 480p', 'quality_480p')
                ],
                [
                    Markup.button.callback('üì± 360p', 'quality_360p'),
                    Markup.button.callback('‚ö° Auto', 'quality_auto')
                ],
                [
                    Markup.button.callback('‚ùå Cancel', 'cancel_download')
                ]
            ]);
        } else {
            return Markup.inlineKeyboard([
                [
                    Markup.button.callback('üéµ 320kbps', 'quality_320k'),
                    Markup.button.callback('üé∂ 256kbps', 'quality_256k')
                ],
                [
                    Markup.button.callback('üîä 128kbps', 'quality_128k'),
                    Markup.button.callback('‚ö° Auto', 'quality_auto')
                ],
                [
                    Markup.button.callback('‚ùå Cancel', 'cancel_download')
                ]
            ]);
        }
    },

    // Language selection
    languageMenu: () => {
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üá∫üá∏ English', 'lang_en'),
                Markup.button.callback('üá™üá∏ Espa√±ol', 'lang_es')
            ],
            [
                Markup.button.callback('üá´üá∑ Fran√ßais', 'lang_fr'),
                Markup.button.callback('üá©üá™ Deutsch', 'lang_de')
            ],
            [
                Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
                Markup.button.callback('‚¨ÖÔ∏è Back', 'menu_settings')
            ]
        ]);
    },

    // Settings menu
    settingsMenu: () => {
        return Markup.inlineKeyboard([
            [
                Markup.button.callback('üåê Language', 'settings_language'),
                Markup.button.callback('üîî Notifications', 'settings_notifications')
            ],
            [
                Markup.button.callback('üì± Download Quality', 'settings_quality'),
                Markup.button.callback('üóÇÔ∏è File Format', 'settings_format')
            ],
            [
                Markup.button.callback('‚¨ÖÔ∏è Back to Menu', 'menu_main')
            ]
        ]);
    },

    // Simple back button
    backButton: (destination = 'menu_main') => {
        return Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è Back', destination)]
        ]);
    },

    // Close button
    closeButton: () => {
        return Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå Close', 'close_message')]
        ]);
    }
};

module.exports = keyboards;